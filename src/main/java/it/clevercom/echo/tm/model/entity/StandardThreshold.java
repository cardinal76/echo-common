package it.clevercom.echo.tm.model.entity;
// Generated 17-feb-2017 16.34.42 by Hibernate Tools 5.2.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * StandardThreshold generated by hbm2java
 */
@Entity
@Table(name = "standard_threshold")
public class StandardThreshold implements java.io.Serializable {

	private long idstandardthreshold;
	private MeasurementType measurementType;
	private Double valuefrom;
	private Double valueto;
	private Boolean mustgeneratealert;
	private String commaenumvalues;
	private Date created;
	private Date updated;
	private boolean active;
	private String updateuser;
	private Set<CustomThreshold> customThresholds = new HashSet<CustomThreshold>(0);

	public StandardThreshold() {
	}

	public StandardThreshold(long idstandardthreshold, MeasurementType measurementType, Date created, Date updated,
			boolean active, String updateuser) {
		this.idstandardthreshold = idstandardthreshold;
		this.measurementType = measurementType;
		this.created = created;
		this.updated = updated;
		this.active = active;
		this.updateuser = updateuser;
	}

	public StandardThreshold(long idstandardthreshold, MeasurementType measurementType, Double valuefrom,
			Double valueto, Boolean mustgeneratealert, String commaenumvalues, Date created, Date updated,
			boolean active, String updateuser, Set<CustomThreshold> customThresholds) {
		this.idstandardthreshold = idstandardthreshold;
		this.measurementType = measurementType;
		this.valuefrom = valuefrom;
		this.valueto = valueto;
		this.mustgeneratealert = mustgeneratealert;
		this.commaenumvalues = commaenumvalues;
		this.created = created;
		this.updated = updated;
		this.active = active;
		this.updateuser = updateuser;
		this.customThresholds = customThresholds;
	}

	@Id

	@Column(name = "idstandardthreshold", unique = true, nullable = false)
	public long getIdstandardthreshold() {
		return this.idstandardthreshold;
	}

	public void setIdstandardthreshold(long idstandardthreshold) {
		this.idstandardthreshold = idstandardthreshold;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idmeasurementtype", nullable = false)
	public MeasurementType getMeasurementType() {
		return this.measurementType;
	}

	public void setMeasurementType(MeasurementType measurementType) {
		this.measurementType = measurementType;
	}

	@Column(name = "valuefrom", precision = 17, scale = 17)
	public Double getValuefrom() {
		return this.valuefrom;
	}

	public void setValuefrom(Double valuefrom) {
		this.valuefrom = valuefrom;
	}

	@Column(name = "valueto", precision = 17, scale = 17)
	public Double getValueto() {
		return this.valueto;
	}

	public void setValueto(Double valueto) {
		this.valueto = valueto;
	}

	@Column(name = "mustgeneratealert")
	public Boolean getMustgeneratealert() {
		return this.mustgeneratealert;
	}

	public void setMustgeneratealert(Boolean mustgeneratealert) {
		this.mustgeneratealert = mustgeneratealert;
	}

	@Column(name = "commaenumvalues")
	public String getCommaenumvalues() {
		return this.commaenumvalues;
	}

	public void setCommaenumvalues(String commaenumvalues) {
		this.commaenumvalues = commaenumvalues;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 29)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", nullable = false, length = 29)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@Column(name = "active", nullable = false)
	public boolean isActive() {
		return this.active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	@Column(name = "updateuser", nullable = false, length = 100)
	public String getUpdateuser() {
		return this.updateuser;
	}

	public void setUpdateuser(String updateuser) {
		this.updateuser = updateuser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "standardThreshold")
	public Set<CustomThreshold> getCustomThresholds() {
		return this.customThresholds;
	}

	public void setCustomThresholds(Set<CustomThreshold> customThresholds) {
		this.customThresholds = customThresholds;
	}

}
